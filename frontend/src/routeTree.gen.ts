/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TeamsRouteImport } from './routes/teams'
import { Route as SignupRouteImport } from './routes/signup'
import { Route as HomeRouteImport } from './routes/home'
import { Route as AvailabilityRouteImport } from './routes/availability'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TeamsIndexRouteImport } from './routes/teams.index'
import { Route as AvailabilityIndexRouteImport } from './routes/availability.index'
import { Route as TeamsTeamIdRouteImport } from './routes/teams.$teamId'
import { Route as AvailabilityScheduleIdRouteImport } from './routes/availability.$scheduleId'

const TeamsRoute = TeamsRouteImport.update({
  id: '/teams',
  path: '/teams',
  getParentRoute: () => rootRouteImport,
} as any)
const SignupRoute = SignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const HomeRoute = HomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRouteImport,
} as any)
const AvailabilityRoute = AvailabilityRouteImport.update({
  id: '/availability',
  path: '/availability',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TeamsIndexRoute = TeamsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => TeamsRoute,
} as any)
const AvailabilityIndexRoute = AvailabilityIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AvailabilityRoute,
} as any)
const TeamsTeamIdRoute = TeamsTeamIdRouteImport.update({
  id: '/$teamId',
  path: '/$teamId',
  getParentRoute: () => TeamsRoute,
} as any)
const AvailabilityScheduleIdRoute = AvailabilityScheduleIdRouteImport.update({
  id: '/$scheduleId',
  path: '/$scheduleId',
  getParentRoute: () => AvailabilityRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/availability': typeof AvailabilityRouteWithChildren
  '/home': typeof HomeRoute
  '/signup': typeof SignupRoute
  '/teams': typeof TeamsRouteWithChildren
  '/availability/$scheduleId': typeof AvailabilityScheduleIdRoute
  '/teams/$teamId': typeof TeamsTeamIdRoute
  '/availability/': typeof AvailabilityIndexRoute
  '/teams/': typeof TeamsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/home': typeof HomeRoute
  '/signup': typeof SignupRoute
  '/availability/$scheduleId': typeof AvailabilityScheduleIdRoute
  '/teams/$teamId': typeof TeamsTeamIdRoute
  '/availability': typeof AvailabilityIndexRoute
  '/teams': typeof TeamsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/availability': typeof AvailabilityRouteWithChildren
  '/home': typeof HomeRoute
  '/signup': typeof SignupRoute
  '/teams': typeof TeamsRouteWithChildren
  '/availability/$scheduleId': typeof AvailabilityScheduleIdRoute
  '/teams/$teamId': typeof TeamsTeamIdRoute
  '/availability/': typeof AvailabilityIndexRoute
  '/teams/': typeof TeamsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/availability'
    | '/home'
    | '/signup'
    | '/teams'
    | '/availability/$scheduleId'
    | '/teams/$teamId'
    | '/availability/'
    | '/teams/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/home'
    | '/signup'
    | '/availability/$scheduleId'
    | '/teams/$teamId'
    | '/availability'
    | '/teams'
  id:
    | '__root__'
    | '/'
    | '/availability'
    | '/home'
    | '/signup'
    | '/teams'
    | '/availability/$scheduleId'
    | '/teams/$teamId'
    | '/availability/'
    | '/teams/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AvailabilityRoute: typeof AvailabilityRouteWithChildren
  HomeRoute: typeof HomeRoute
  SignupRoute: typeof SignupRoute
  TeamsRoute: typeof TeamsRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/teams': {
      id: '/teams'
      path: '/teams'
      fullPath: '/teams'
      preLoaderRoute: typeof TeamsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/availability': {
      id: '/availability'
      path: '/availability'
      fullPath: '/availability'
      preLoaderRoute: typeof AvailabilityRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/teams/': {
      id: '/teams/'
      path: '/'
      fullPath: '/teams/'
      preLoaderRoute: typeof TeamsIndexRouteImport
      parentRoute: typeof TeamsRoute
    }
    '/availability/': {
      id: '/availability/'
      path: '/'
      fullPath: '/availability/'
      preLoaderRoute: typeof AvailabilityIndexRouteImport
      parentRoute: typeof AvailabilityRoute
    }
    '/teams/$teamId': {
      id: '/teams/$teamId'
      path: '/$teamId'
      fullPath: '/teams/$teamId'
      preLoaderRoute: typeof TeamsTeamIdRouteImport
      parentRoute: typeof TeamsRoute
    }
    '/availability/$scheduleId': {
      id: '/availability/$scheduleId'
      path: '/$scheduleId'
      fullPath: '/availability/$scheduleId'
      preLoaderRoute: typeof AvailabilityScheduleIdRouteImport
      parentRoute: typeof AvailabilityRoute
    }
  }
}

interface AvailabilityRouteChildren {
  AvailabilityScheduleIdRoute: typeof AvailabilityScheduleIdRoute
  AvailabilityIndexRoute: typeof AvailabilityIndexRoute
}

const AvailabilityRouteChildren: AvailabilityRouteChildren = {
  AvailabilityScheduleIdRoute: AvailabilityScheduleIdRoute,
  AvailabilityIndexRoute: AvailabilityIndexRoute,
}

const AvailabilityRouteWithChildren = AvailabilityRoute._addFileChildren(
  AvailabilityRouteChildren,
)

interface TeamsRouteChildren {
  TeamsTeamIdRoute: typeof TeamsTeamIdRoute
  TeamsIndexRoute: typeof TeamsIndexRoute
}

const TeamsRouteChildren: TeamsRouteChildren = {
  TeamsTeamIdRoute: TeamsTeamIdRoute,
  TeamsIndexRoute: TeamsIndexRoute,
}

const TeamsRouteWithChildren = TeamsRoute._addFileChildren(TeamsRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AvailabilityRoute: AvailabilityRouteWithChildren,
  HomeRoute: HomeRoute,
  SignupRoute: SignupRoute,
  TeamsRoute: TeamsRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
